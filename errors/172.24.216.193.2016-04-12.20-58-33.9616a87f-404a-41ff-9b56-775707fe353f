(dp1
S'output'
p2
S"<type 'exceptions.IOError'> [Errno 2] No such file or directory: 'C:\\\\inetpub\\\\wwwroot\\\\applications\\\\DBFread\\\\uploads\\\\'"
p3
sS'layer'
p4
S'C:\\inetpub\\wwwroot\\applications\\DBFread\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nimport cStringIO\nfrom reportlab.pdfgen import canvas\nfrom reportlab.lib.pagesizes import letter\nfrom reportlab.lib.units import inch, mm\nfrom reportlab.lib.enums import TA_LEFT, TA_RIGHT, TA_CENTER, TA_JUSTIFY\nimport time\nfrom dbfpy import dbf\nimport os\nimport random\n\ndef index():\n    pdf = None\n    jacket = None\n\n    form=SQLFORM.factory(\n        Field(\'jacketno\',\'string\', label=\'Jacket Number\'),\n        Field(\'dbffile\',\'upload\',uploadfolder=os.path.join(request.folder,\'uploads\'), label=\'DBF File\'),\n        formstyle="divs", formname="dist_rep"\n    )\n    if form.process().accepted:\n        jacket = form.vars.jacketno\n        upfile=os.path.join(request.folder,\'uploads\',form.vars.dbffile)\n\n        table = dbf.Dbf(upfile)\n\n        buffer = cStringIO.StringIO()\n        c = canvas.Canvas(buffer, pagesize=letter)\n        width, height = letter\n        top_bottom_margin = 1.0*inch\n        left_right_margin = 0.30*inch\n        line_space = 0.1875*inch\n        scnd_clmn = width/2\n        rec_size = 1.5*inch\n\n        c.translate(0, height - line_space)\n        c.setFont("Helvetica", 11)\n        c.drawCentredString(width/2,-line_space * 1,"Jacket: "+str(jacket))\n        c.drawCentredString(width/2,-line_space * 2,"Date: "+time.strftime("%m/%d/%Y"))\n\n        total_count = 0\n        rec_count = 0\n        pair_count = -1\n        for item in table:\n            c.setFont("Helvetica", 10)\n            if rec_count%2 == 0:\n                pair_count+=1\n                c.drawString(left_right_margin, -top_bottom_margin - (0 * line_space) - (rec_size * pair_count), item[\'AGENCY\'] if item[\'AGENCY\'] else \'\')\n                c.drawString(left_right_margin, -top_bottom_margin - (1 * line_space) - (rec_size * pair_count), item[\'ADDRESS1\'] if item[\'ADDRESS1\'] else \'\')\n                c.drawString(left_right_margin, -top_bottom_margin - (2 * line_space) - (rec_size * pair_count), item[\'ADDRESS2\'] if item[\'ADDRESS2\'] else \'\')\n                c.drawString(left_right_margin, -top_bottom_margin - (3 * line_space) - (rec_size * pair_count), item[\'ADDRESS3\'] if item[\'ADDRESS3\'] else \'\')\n                c.drawString(left_right_margin, -top_bottom_margin - (4 * line_space) - (rec_size * pair_count), item[\'ADDRESS4\'] if item[\'ADDRESS4\'] else \'\')\n            else:\n                c.drawString(scnd_clmn + left_right_margin, -top_bottom_margin - (0 * line_space) - (rec_size * pair_count), item[\'AGENCY\'] if item[\'AGENCY\'] else \'\')\n                c.drawString(scnd_clmn + left_right_margin, -top_bottom_margin - (1 * line_space) - (rec_size * pair_count), item[\'ADDRESS1\'] if item[\'ADDRESS1\'] else \'\')\n                c.drawString(scnd_clmn + left_right_margin, -top_bottom_margin - (2 * line_space) - (rec_size * pair_count), item[\'ADDRESS2\'] if item[\'ADDRESS2\'] else \'\')\n                c.drawString(scnd_clmn + left_right_margin, -top_bottom_margin - (3 * line_space) - (rec_size * pair_count), item[\'ADDRESS3\'] if item[\'ADDRESS3\'] else \'\')\n                c.drawString(scnd_clmn + left_right_margin, -top_bottom_margin - (4 * line_space) - (rec_size * pair_count), item[\'ADDRESS4\'] if item[\'ADDRESS4\'] else \'\')\n            rec_count+=1\n            if rec_count > 11:\n                rec_count = 0\n                pair_count = -1\n                c.showPage()\n                c.translate(0, height - line_space)\n                c.setFont("Helvetica", 11)\n                c.drawCentredString(width/2,-line_space * 1,"Jacket: "+str(jacket))\n                c.drawCentredString(width/2,-line_space * 2,"Date: "+time.strftime("%m/%d/%Y"))\n\n        c.save()\n        pdf = buffer.getvalue()\n        buffer.close()\n\n        header = {\'Content-Disposition\': \'attachment; filename=\' + str(jacket) + \'_labels.pdf\'}\n#        header = {\'Content-Type\': \'application/pdf\'}\n\n        response.headers.update(header)\n        return pdf\n    elif form.errors:\n        response.flash = \'Form Has Errors\'\n    else:\n        response.flash = \'Please Fill the Form\'\n\n    return dict(form=form)\n\n\ndef create_pdf():\n    pdf = None\n    jacket = None\n\n    form=SQLFORM.factory(\n        Field(\'title\',\'string\', label=\'Description or Title\'),\n        Field(\'dbffile\',\'upload\',uploadfolder=os.path.join(request.folder,\'uploads\'), label=\'DBF File\'),\n        formstyle="divs", formname="dist_rep"\n    )\n    if form.process().accepted:\n        title = form.vars.title\n        upfile=os.path.join(request.folder,\'uploads\',form.vars.dbffile)\n\n        table = dbf.Dbf(upfile)\n\n        buffer = cStringIO.StringIO()\n        c = canvas.Canvas(buffer, pagesize=letter)\n        width, height = letter\n        line_space = 11\n        third_page = height/3 - 5\n        end_width = width - 25\n\n        for item in table:\n            c.translate(0, height - line_space)\n            time.sleep(0.01)\n            rec_num = str.format(\'{0:.2f}\',time.time())\n            for pos in range(0,3):\n                c.setFont("Helvetica", 11)\n                c.drawCentredString(width/2, -line_space - (third_page * pos), "UNITED STATES GOVERNMENT PUBLISHING OFFICE")\n                c.drawCentredString(width/2, -2*(line_space) - (third_page * pos), "DELIVERY RECEIPT")\n                c.setFont("Helvetica", 10)\n                c.drawString(15*mm, -(3 * line_space) - (third_page * pos),"JACKET")\n                c.setFont("Helvetica-Bold", 10)\n                c.drawString(35*mm, -(3 * line_space) - (third_page * pos),str(item[\'BILLINGJKT\']) + "  00000")\n                c.setFont("Helvetica", 10)\n                c.drawString(60*mm, -(3 * line_space) - (third_page * pos),"REQ. NO.")\n                c.setFont("Helvetica-Bold", 10)\n                c.drawString(80*mm, -(3 * line_space) - (third_page * pos),"00000")\n                c.setFont("Helvetica", 10)\n                c.drawString(140*mm, -(3 * line_space) - (third_page * pos),"RECEIPT NO.")\n                c.setFont("Helvetica-Bold", 10)\n                c.drawString(175*mm, -(3 * line_space) - (third_page * pos),rec_num)\n                c.setFont("Helvetica", 10)\n                c.drawString(15*mm, -(5 * line_space) - (third_page * pos),"DELIVER TO:")\n                c.drawString(140*mm, -(5 * line_space) - (third_page * pos), "DATE:")\n                c.drawString(140*mm, -(6 * line_space) - (third_page * pos), "PREPARED BY:")\n                c.drawString(140*mm, -(7 * line_space) - (third_page * pos), "AGENCY BAC:")\n                c.drawString(140*mm, -(8 * line_space) - (third_page * pos), "AGENCY JACKET:")\n                c.drawString(140*mm, -(9 * line_space) - (third_page * pos), "AGENCY REQ.:")\n                c.setFont("Helvetica-Bold", 10)\n                c.drawString(175*mm,-(5 * line_space) - (third_page * pos), time.strftime("%m/%d/%y"))\n#                c.drawString(175*mm,-(6 * line_space) - (third_page * pos), auth.user.first_name[0] + \'. \' + auth.user.last_name)\n                c.drawString(175*mm,-(7 * line_space) - (third_page * pos), item[\'BAC\'] if item[\'BAC\'] else \'\')\n                c.drawString(175*mm,-(8 * line_space) - (third_page * pos), str(item[\'OPENJKT\'])[0:3] + \'-\' + str(item[\'OPENJKT\'])[3:6] if item[\'OPENJKT\'] and str(item[\'OPENJKT\'])[0:2] != \'00\' else \'\')\n                c.drawString(175*mm,-(9 * line_space) - (third_page * pos), item[\'REQ\'] if item[\'REQ\'] else \'\')\n                c.drawString(40*mm,-(5 * line_space) - (third_page * pos), item[\'AGENCY\'] if item[\'AGENCY\'] else \'\')\n                c.drawString(40*mm,-(6 * line_space) - (third_page * pos), item[\'ADDRESS1\'] if item[\'ADDRESS1\'] else \'\')\n                c.drawString(40*mm,-(7 * line_space) - (third_page * pos), item[\'ADDRESS2\'] if item[\'ADDRESS2\'] else \'\')\n                c.drawString(40*mm,-(8 * line_space) - (third_page * pos), item[\'ADDRESS3\'] if item[\'ADDRESS3\'] else \'\')\n                c.drawString(40*mm,-(9 * line_space) - (third_page * pos), item[\'ADDRESS4\'] if item[\'ADDRESS4\'] else \'\')\n                c.setFont("Helvetica", 10)\n                c.line(15*mm, -(10 * line_space) - (third_page * pos), end_width, -(10 * line_space) - (third_page * pos))\n                c.drawCentredString(152*mm, -(11 * line_space) - (third_page * pos), "NUMBER")\n                c.drawCentredString(176*mm, -(11 * line_space) - (third_page * pos), "NUMBER")\n                c.drawCentredString(198*mm, -(11 * line_space) - (third_page * pos), "MISC.")\n\n                c.drawCentredString(27*mm,-(12 * line_space) - (third_page * pos), "QUANTITY")\n                c.drawCentredString(90*mm,-(12 * line_space) - (third_page * pos), "DESCRIPTION OR TITLE")\n                c.drawCentredString(152*mm,-(12 * line_space) - (third_page * pos), "PACKAGES")\n                c.drawCentredString(176*mm,-(12 * line_space) - (third_page * pos), "CARTONS")\n                c.drawCentredString(198*mm,-(12 * line_space) - (third_page * pos), "OTHER")\n                c.line(15*mm,-(12 * line_space+2) - (third_page * pos), end_width, -(12 * line_space+2) - (third_page * pos))\n                c.line(15*mm,-(14 * line_space+2) - (third_page * pos), end_width, -(14 * line_space+2) - (third_page * pos))\n                c.line(40*mm,-(10 * line_space) - (third_page * pos), 40*mm, -(14 * line_space+2) - (third_page * pos))\n                c.line(width*2/3 - 5*mm,-(10 * line_space) - (third_page * pos), width*2/3 - 5*mm,-(14 * line_space+2) - (third_page * pos))\n                c.line(width*2/3 + 20*mm,-(10 * line_space) - (third_page * pos), width*2/3 + 20*mm,-(14 * line_space+2) - (third_page * pos))\n                c.line(width*2/3 + 43*mm,-(10 * line_space) - (third_page * pos), width*2/3 + 43*mm,-(14 * line_space+2) - (third_page * pos))\n                c.setFont("Helvetica-Bold", 10)\n                c.drawCentredString(27*mm, -(14 * line_space) - (third_page * pos),  str(item[\'HEARG\']) if item[\'HEARG\'] else \'\')\n                c.drawCentredString(90*mm, -(14 * line_space) - (third_page * pos),  str(title))\n\n                c.setFont("Helvetica", 10)\n                c.drawString(15*mm,-(16 * line_space) - (third_page * pos),"CHECKER")\n                c.line(37*mm,-(16 * line_space + 1*mm) - (third_page * pos), end_width/2 + 5*mm, -(16 * line_space+ 1*mm) - (third_page * pos))\n                c.drawString(end_width/2 + 10*mm,-(16 * line_space) - (third_page * pos),"REC. IN DELIVERY")\n                c.line(end_width/2 + 43*mm,-(16 * line_space + 1*mm) - (third_page * pos), end_width, -(16 * line_space + 1*mm) - (third_page * pos))\n                c.drawString(15*mm,-(18 * line_space) - (third_page * pos),"MESSENGER")\n                c.line(37*mm,-(18 * line_space + 1*mm) - (third_page * pos), end_width/2 + 5*mm,-(18 * line_space + 1*mm) - (third_page * pos))\n                c.line(end_width/2 + 10*mm,-(18 * line_space + 1*mm) - (third_page * pos), end_width,-(18 * line_space + 1*mm) - (third_page * pos))\n                c.setFont("Helvetica-Oblique", 9)\n                c.drawString(end_width/2 + 12*mm,-(19 * line_space + 1*mm) - (third_page * pos),"SIGNATURE OF PERSON RECEIVING")\n                c.drawString(end_width-10*mm,-(19 * line_space + 1*mm) - (third_page * pos),"DATE")\n                c.setFont("Helvetica", 9)\n                if pos == 0:\n                    c.drawCentredString(width/2,-(20 * line_space + 1*mm) - (third_page * pos), "(Control Copy)")\n                elif pos == 1:\n                    c.drawCentredString(width/2,-(20 * line_space + 1*mm) - (third_page * pos), "(Customer Copy)")\n                elif pos == 2:\n                    c.drawCentredString(width/2,-(20 * line_space + 1*mm) - (third_page * pos), "(Delivery Copy)")\n            c.showPage()\n            c.save()\n\n        pdf = buffer.getvalue()\n        buffer.close()\n\n        header = {\'Content-Disposition\': \'attachment; filename=\' + str(title) + \'_labels.pdf\'}\n#        header = {\'Content-Type\': \'application/pdf\'}\n\n        response.headers.update(header)\n        return pdf\n    elif form.errors:\n        response.flash = \'Form Has Errors\'\n    else:\n        response.flash = \'Please Fill the Form\'\n\n    return dict(form=form)\n\nresponse._vars=response._caller(create_pdf)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File ".\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\inetpub\\wwwroot\\applications\\DBFread\\controllers/default.py", line 211, in <module>\n  File ".\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\inetpub\\wwwroot\\applications\\DBFread\\controllers/default.py", line 107, in create_pdf\n    table = dbf.Dbf(upfile)\n  File "C:\\Python27\\lib\\site-packages\\dbfpy\\dbf.py", line 128, in __init__\n    self.stream = file(f, ("r+b", "rb")[bool(readOnly)])\nIOError: [Errno 2] No such file or directory: \'C:\\\\inetpub\\\\wwwroot\\\\applications\\\\DBFread\\\\uploads\\\\\'\n'
p11
s.